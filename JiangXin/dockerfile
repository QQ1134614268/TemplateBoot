# 使用官方的 Maven 镜像作为基础镜像
FROM maven:3.6.0-jdk-8-alpine AS build
# 将当前目录设置为工作目录
WORKDIR /app
COPY pom.xml /app
# 优化: 使用自定义setting.xml, 配置国内源,加快下载速度; go-offline: 下载依赖和maven插件, 不会下载传递依赖, mvn package 会下载所有缺失的依赖
COPY docker.maven.settings.xml /app
RUN mvn dependency:go-offline -s /app/docker.maven.settings.xml

COPY src ./src
RUN mvn package -DskipTests -s /app/docker.maven.settings.xml

# 使用一个轻量级的 JDK 镜像作为基础镜像
FROM openjdk:8-jre
# 设置工作目录
WORKDIR /app
# 将 Maven 容器中的 target/*.jar 复制到 Docker 容器的 /app 目录下
COPY --from=build /app/target/*.jar /app/JiangxinServe.jar
# 暴露端口
EXPOSE 19200
# 在容器启动时运行 jar 包
CMD ["java", "-jar", "-Dactive=pro", "JiangxinServe.jar"]

# docker build -t jiangxin_serve .
# docker run -d --name jiangxin_serve -p 19200:19200 -v /app/jiangxin_serve/data/upload:/app/data/upload -v /app/jiangxin_serve/data/log:/app/data/log -v /etc/localtime:/etc/localtime --restart=always -e TZ=Asia/Shanghai jiangxin_serve
