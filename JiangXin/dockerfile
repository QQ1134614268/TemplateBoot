# 使用官方的 Maven 镜像作为基础镜像
FROM maven:3.6.0-jdk-8-alpine AS build
# 将当前目录设置为工作目录
WORKDIR /app
COPY pom.xml /app
# 优化: 使用自定义setting.xml, 配置国内源,加快下载速度; go-offline: 下载依赖和maven插件
RUN mvn dependency:go-resolve
COPY src ./src
RUN mvn clean package -DskipTests

# 使用一个轻量级的 JDK 镜像作为基础镜像
FROM openjdk:8-jre-slim
# 设置工作目录
WORKDIR /app
RUN mkdir -p data/upload
RUN mkdir -p data/log
# 将 Maven 容器中的 target/*.jar 复制到 Docker 容器的 /app 目录下
COPY --from=build /app/target/*.jar /app/JiangxinServe.jar
# 暴露端口
EXPOSE 29090
# 在容器启动时运行 jar 包
CMD ["java", "-jar", "-Dactive=pro", "JiangxinServe.jar"]

# docker build -t jiangxin_serve .
# docker run -d --name jiangxin_serve -p 29090:29090 -v /app/jiangxin/data:/app/data jiangxin_serve
